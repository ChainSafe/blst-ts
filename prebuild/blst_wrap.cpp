/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
# include "blst.hpp"
using namespace blst;
#else
# include "blst.h"
#endif

static const char *const BLST_ERROR_str [] = {
    "BLST_ERROR: success",
    "BLST_ERROR: bad point encoding",
    "BLST_ERROR: point is not on curve",
    "BLST_ERROR: point is not in group",
    "BLST_ERROR: context type mismatch",
    "BLST_ERROR: verify failed",
    "BLST_ERROR: public key is infinite",
};

#define SWIG_PYTHON_STRICT_BYTE_CHAR

#ifdef _WIN32
# include <malloc.h>
# ifndef alloca
#  define alloca(s) _alloca(s)
# endif
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x060000
#endif


#if defined(__GNUC__)
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wunused-parameter"
// Minimum supported Node.js version is v6.0, which is guaranteed
// to have v8-version.h...
# include <v8-version.h>
# if __GNUC__>=8 && V8_MAJOR_VERSION<7
#  pragma GCC diagnostic ignored "-Wcast-function-type"
# endif
#endif

#include <node.h>
//Older version of node.h does not include this
#include <node_version.h>


#include <v8.h>

#if defined(__GNUC__)
# pragma GCC diagnostic pop
#endif

#if defined(V8_MAJOR_VERSION) && defined(V8_MINOR_VERSION)
#undef SWIG_V8_VERSION
#define SWIG_V8_VERSION (V8_MAJOR_VERSION * 256 + V8_MINOR_VERSION)
#endif

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>

class SWIGV8_ClientData;
#define SWIG_CLIENT_DATA_TYPE SWIGV8_ClientData

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);
#ifndef SWIG_CLIENT_DATA_TYPE
#define SWIG_CLIENT_DATA_TYPE void
#endif

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  SWIG_CLIENT_DATA_TYPE  *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, SWIG_CLIENT_DATA_TYPE *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, SWIG_CLIENT_DATA_TYPE *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * Useful table of versions: https://nodejs.org/en/download/releases/
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#elif (SWIG_V8_VERSION < 0x0704)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(isolate, cstr, v8::String::kNormalString, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) (v8::String::NewFromUtf8(isolate, cstr, v8::NewStringType::kNormal, len)).ToLocalChecked()
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

/*
 * SWIGV8_HANDLESCOPE* macros imply |isolate| to be declared in current scope.
 * Most common way is to 'v8::Isolate* isolate = args.GetIsolate();' [in all
 * supported V8 versions].
 */
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(isolate)
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(isolate)
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(isolate)
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(isolate)
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_CONTEXT(isolate) v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_CONTEXT(isolate) isolate->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#if (SWIG_V8_VERSION < 0x0704)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str, v8::String::kNormalString)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(isolate, sym, v8::String::kNormalString)
#else
#define SWIGV8_STRING_NEW(str) (v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str, v8::NewStringType::kNormal)).ToLocalChecked()
#define SWIGV8_SYMBOL_NEW(sym) (v8::String::NewFromUtf8(isolate, sym, v8::NewStringType::kNormal)).ToLocalChecked()
#endif
#endif

#if (V8_MAJOR_VERSION-0) < 5
#define SWIGV8_MAYBE_CHECK(maybe) maybe
#elif (SWIG_V8_VERSION < 0x0704)
#define SWIGV8_MAYBE_CHECK(maybe) maybe.FromJust()
#else
#define SWIGV8_MAYBE_CHECK(maybe) maybe.Check()
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
/* internal use only */
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(...) v8::FunctionTemplate::New(__VA_ARGS__)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_OBJECT_INEW() v8::Object::New()

#define SWIGV8_ARRAY_NEW(size) v8::Array::New(size)
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#define SWIGV8_ARRAY v8::Handle<v8::Array>
#define SWIGV8_FUNCTION_TEMPLATE v8::Handle<v8::FunctionTemplate>
#define SWIGV8_OBJECT v8::Handle<v8::Object>
#define SWIGV8_OBJECT_TEMPLATE v8::Handle<v8::ObjectTemplate>
#define SWIGV8_VALUE v8::Handle<v8::Value>
#define SWIGV8_ARRAY_GET(array, index) (array)->Get(index)
#define SWIGV8_ARRAY_SET(array, index, value) (array)->Set(index, value)
#define SWIGV8_GETISOLATE(context) v8::Isolate::GetCurrent()
#else
/* internal use only, imply |isolate| to be declared in current scope */
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(isolate, val)
#define SWIGV8_FUNCTEMPLATE_NEW(...) v8::FunctionTemplate::New(isolate, __VA_ARGS__)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(isolate)
#define SWIGV8_OBJECT_INEW() v8::Object::New(isolate)

#define SWIGV8_ARRAY_NEW(size) v8::Array::New(v8::Isolate::GetCurrent(), size)
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#define SWIGV8_ARRAY v8::Local<v8::Array>
#define SWIGV8_FUNCTION_TEMPLATE v8::Local<v8::FunctionTemplate>
#define SWIGV8_OBJECT v8::Local<v8::Object>
#define SWIGV8_OBJECT_TEMPLATE v8::Local<v8::ObjectTemplate>
#define SWIGV8_VALUE v8::Local<v8::Value>
#define SWIGV8_ARRAY_GET(array, index) (array)->Get(SWIGV8_CURRENT_CONTEXT(), index).ToLocalChecked()
#define SWIGV8_ARRAY_SET(array, index, value) SWIGV8_MAYBE_CHECK((array)->Set(SWIGV8_CURRENT_CONTEXT(), index, value))
#define SWIGV8_GETISOLATE(context) context->GetIsolate()
#endif

/* internal use only [imply |isolate| to be declared in current scope] */
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(isolate, class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(isolate, class);
#endif

#if (V8_MAJOR_VERSION-0) < 6 || (SWIG_V8_VERSION < 0x0608)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject()
#define SWIGV8_TO_STRING(handle) (handle)->ToString()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length()
#else
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#if (SWIG_V8_VERSION < 0x0704)
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#else
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(v8::Isolate::GetCurrent())
#endif
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be reset properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See definition of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  SWIGV8_VALUE err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
private:
  v8::Persistent<v8::FunctionTemplate> clazz_templ;
public:
  size_t index;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif

  SWIGV8_ClientData() : index(-1) {}
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Persistent<v8::FunctionTemplate> GetType(v8::Isolate* isolate,
                                               v8::Persistent<v8::FunctionTemplate>* v8_swig_types = NULL) {
    return clazz_templ;
  }
#else
  SWIGV8_FUNCTION_TEMPLATE GetType(v8::Isolate* isolate,
                                   v8::Persistent<v8::FunctionTemplate>* v8_swig_types) {
#if (V8_MAJOR_VERSION-0) >= 5
    if (v8_swig_types != NULL)
      return SWIGV8_FUNCTION_TEMPLATE::New(isolate, v8_swig_types[index+1]);
#endif
    return SWIGV8_FUNCTION_TEMPLATE::New(isolate, clazz_templ);
  }
#endif
  bool IsTypeEmpty(v8::Persistent<v8::FunctionTemplate>* v8_swig_types) {
#if (V8_MAJOR_VERSION-0) >= 5
    if (v8_swig_types != NULL)
      return v8_swig_types[index+1].IsEmpty();
#endif
    return clazz_templ.IsEmpty();
  }
  void SetType(SWIGV8_FUNCTION_TEMPLATE class_templ, v8::Isolate *isolate,
               v8::Persistent<v8::FunctionTemplate>* v8_swig_types) {
#if (V8_MAJOR_VERSION-0) >= 5
    if (v8_swig_types != NULL) {
      v8_swig_types[index+1].Reset(isolate, class_templ);
      return;
    }
#endif
    if (clazz_templ.IsEmpty()) {
      SWIGV8_SET_CLASS_TEMPL(clazz_templ, class_templ);
    }
  }
};

static SWIGV8_ClientData SWIGV8_SWIGTYPE_Proxy;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(SWIGV8_OBJECT objRef, void **ptr, swig_type_info *info, int flags) {
  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, cdata->swigCObject, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = cdata->swigCObject;
  }

  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(SWIGV8_VALUE valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  SWIGV8_OBJECT objRef = SWIGV8_OBJECT::Cast(valRef);

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(SWIGV8_OBJECT obj, void *ptr, swig_type_info *info, int flags) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(isolate, obj);
#else
  cdata->handle.Reset(isolate, obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && info->clientdata) {
    cdata->handle.MakeWeak(cdata, info->clientdata->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && info->clientdata {
    cdata->handle.MakeWeak(isolate, cdata, info->clientdata->dtor);
  } else {
    cdata->handle.MakeWeak(isolate, cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && info->clientdata) {
    cdata->handle.MakeWeak(cdata, info->clientdata->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 5
  if(cdata->swigCMemOwn && info->clientdata) {
    cdata->handle.SetWeak(cdata, info->clientdata->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && info->clientdata) {
    cdata->handle.SetWeak(cdata, info->clientdata->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(isolate);
#elif (SWIG_V8_VERSION < 0x0704)
  cdata->handle.MarkIndependent();
// Looks like future versions do not require that anymore:
// https://monorail-prod.appspot.com/p/chromium/issues/detail?id=923361#c11
#endif
}

SWIGRUNTIME int SWIG_V8_ConvertPtr(SWIGV8_VALUE valRef, void **ptr, swig_type_info *info, int flags) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  SWIGV8_OBJECT objRef = SWIGV8_OBJECT::Cast(valRef);
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME SWIGV8_VALUE SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags,
                                               SWIGV8_VALUE data) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_HANDLESCOPE_ESC();
  v8::Persistent<v8::FunctionTemplate>* v8_swig_types = NULL;
#if (V8_MAJOR_VERSION-0) >= 5
  v8::Local<v8::ArrayBuffer> ab = v8::Local<v8::ArrayBuffer>::Cast(data);
#if (V8_MAJOR_VERSION-0) >= 8
  v8_swig_types = static_cast<v8::Persistent<v8::FunctionTemplate>*>(ab->GetBackingStore()->Data());
#else
  v8_swig_types = static_cast<v8::Persistent<v8::FunctionTemplate>*>(ab->GetContents().Data());
#endif
#endif

  SWIGV8_FUNCTION_TEMPLATE class_templ;

  if (ptr == NULL) {
    SWIGV8_ESCAPE(v8::Null(isolate));
  }

  if(info->clientdata != 0) {
    class_templ = info->clientdata->GetType(isolate, v8_swig_types);
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy.GetType(isolate, v8_swig_types);
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
#else
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance(SWIGV8_CONTEXT(isolate)).ToLocalChecked();
#endif

  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags, jsdata)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags, jsdata)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0, jsdata)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(SWIGV8_VALUE valRef) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(isolate, SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CONTEXT(isolate), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && SWIGV8_BOOLEAN_VALUE(flag));
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(SWIGV8_VALUE valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    v8::Isolate* isolate = v8::Isolate::GetCurrent();
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    SWIGV8_OBJECT objRef = SWIGV8_TO_OBJECT(valRef);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(SWIGV8_VALUE valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
  object.Clear();
#endif
}

SWIGRUNTIME
SWIGV8_VALUE SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_INEW();

#if (V8_MAJOR_VERSION-0) < 5
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(isolate, SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CONTEXT(isolate), privateKey, v8::Boolean::New(isolate, true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(isolate, obj);
#else
  cdata->handle.Reset(isolate, obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(isolate, cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(isolate);
#elif (SWIG_V8_VERSION < 0x0704)
  cdata->handle.MarkIndependent();
// Looks like future versions do not require that anymore:
// https://monorail-prod.appspot.com/p/chromium/issues/detail?id=923361#c11
#endif

  SWIGV8_ESCAPE(obj);

}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

SWIGV8_VALUE SWIGV8_AppendOutput(SWIGV8_VALUE result, SWIGV8_VALUE obj) {
  v8::Isolate* isolate = v8::Isolate::GetCurrent();
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW(0);
  } else if (!result->IsArray()) {
    SWIGV8_ARRAY tmparr = SWIGV8_ARRAY_NEW(0);
    SWIGV8_ARRAY_SET(tmparr, 0, result);
    result = tmparr;
  }

  SWIGV8_ARRAY arr = SWIGV8_ARRAY::Cast(result);
  SWIGV8_ARRAY_SET(arr, arr->Length(), obj);
  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME SWIGV8_FUNCTION_TEMPLATE SWIGV8_CreateClassTemplate(const char* symbol,
  v8::Isolate* isolate, v8::Local<v8::Value> data) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));
    class_templ->InstanceTemplate()->SetInternalFieldCount(1);
    class_templ->PrototypeTemplate()->Set(SWIGV8_SYMBOL_NEW("equals"),
                                          SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals, data));
    class_templ->PrototypeTemplate()->Set(SWIGV8_SYMBOL_NEW("getCPtr"),
                                          SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr, data));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(SWIGV8_FUNCTION_TEMPLATE class_templ,
  const char* symbol, SwigV8FunctionCallback _func,
  v8::Isolate* isolate, v8::Local<v8::Value> data) {

    class_templ->PrototypeTemplate()->Set(SWIGV8_SYMBOL_NEW(symbol),
                                          SWIGV8_FUNCTEMPLATE_NEW(_func, data));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(SWIGV8_FUNCTION_TEMPLATE class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter,
  v8::Isolate* isolate, v8::Local<v8::Value> data) {
    class_templ->InstanceTemplate()->SetAccessor(SWIGV8_SYMBOL_NEW(symbol),
                                                 getter, setter, data);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(SWIGV8_OBJECT obj, const char* symbol,
  const SwigV8FunctionCallback& _func, v8::Local<v8::Context> context,
  v8::Local<v8::Value> data) {
    v8::Isolate* isolate = SWIGV8_GETISOLATE(context);

#if (V8_MAJOR_VERSION-0) < 5
    obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func, data)->GetFunction());
#else
    SWIGV8_MAYBE_CHECK(obj->Set(context, SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func, data)->GetFunction(context).ToLocalChecked()));
#endif
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(SWIGV8_OBJECT obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter,
  v8::Local<v8::Context> context, v8::Local<v8::Value> data) {
  v8::Isolate* isolate = SWIGV8_GETISOLATE(context);
#if (V8_MAJOR_VERSION-0) < 5
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter, data);
#else
  SWIGV8_MAYBE_CHECK(obj->SetAccessor(context, SWIGV8_SYMBOL_NEW(symbol), getter, setter, data));
#endif
}

#if (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      SWIGV8_WRITE_UTF8(sproperty, buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BLST_ERROR swig_types[0]
#define SWIGTYPE_p_blst__P1 swig_types[1]
#define SWIGTYPE_p_blst__P1_Affine swig_types[2]
#define SWIGTYPE_p_blst__P2 swig_types[3]
#define SWIGTYPE_p_blst__P2_Affine swig_types[4]
#define SWIGTYPE_p_blst__PT swig_types[5]
#define SWIGTYPE_p_blst__Pairing swig_types[6]
#define SWIGTYPE_p_blst__SecretKey swig_types[7]
#define SWIGTYPE_p_byte swig_types[8]
#define SWIGTYPE_p_char swig_types[9]
#define SWIGTYPE_p_int swig_types[10]
#define SWIGTYPE_p_long_long swig_types[11]
#define SWIGTYPE_p_short swig_types[12]
#define SWIGTYPE_p_signed_char swig_types[13]
#define SWIGTYPE_p_unsigned_char swig_types[14]
#define SWIGTYPE_p_unsigned_int swig_types[15]
#define SWIGTYPE_p_unsigned_long_long swig_types[16]
#define SWIGTYPE_p_unsigned_short swig_types[17]
static swig_type_info *swig_types[19];
static swig_module_info swig_module = {swig_types, 18, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x040100 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <string>


#include <stdint.h>		// Use the C99 official header


#if V8_MAJOR_VERSION >= 8
# define GetData() GetBackingStore()->Data()
#else
# define GetData() GetContents().Data()
#endif


SWIGINTERNINLINE
SWIGV8_VALUE SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SWIGV8_VALUE valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    v8::Handle<v8::String> js_str = v8::Handle<v8::String>::Cast(valRef);
#else
    v8::Local<v8::String> js_str = v8::Local<v8::String>::Cast(valRef);
#endif

    size_t len = SWIGV8_UTF8_LENGTH(js_str) + 1;
    if(psize) *psize = len;
    if(cptr) {
      *cptr = new char[len];
      SWIGV8_WRITE_UTF8(js_str, *cptr, len);
      if(alloc) *alloc = SWIG_NEWOBJ;
    } else if(alloc) {
      *alloc = SWIG_OLDOBJ;
    }
    return SWIG_OK;
  } else if(valRef->IsObject()) {
    SWIGV8_OBJECT obj = SWIGV8_OBJECT::Cast(valRef);
    // try if the object is a wrapped char[]
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if(pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
        if (cptr) *cptr = (char *) vptr;
        if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
        if (alloc) *alloc = SWIG_OLDOBJ;
        return SWIG_OK;
      }
    }
    return SWIG_TypeError;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (SWIGV8_VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}





SWIGINTERN
int SWIG_AsVal_double (SWIGV8_VALUE obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_NUMBER_VALUE(obj);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (SWIGV8_VALUE obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (SWIGV8_VALUE obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (SWIGV8_VALUE obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE
SWIGV8_VALUE
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN
int SWIG_AsVal_long (SWIGV8_VALUE obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (SWIGV8_VALUE obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = SWIGV8_BOOLEAN_VALUE(obj);
  return SWIG_OK;
}


#define SWIGV8_INIT blst_initialize
#define SWIGV8_JSNAME "blst"


SWIGV8_ClientData _exports_SecretKey_clientData;
SWIGV8_ClientData _exports_P1_Affine_clientData;
SWIGV8_ClientData _exports_P1_clientData;
SWIGV8_ClientData _exports_P2_Affine_clientData;
SWIGV8_ClientData _exports_P2_clientData;
SWIGV8_ClientData _exports_PT_clientData;
SWIGV8_ClientData _exports_Pairing_clientData;


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_SUCCESS(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_SUCCESS));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_BAD_ENCODING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_BAD_ENCODING(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_BAD_ENCODING));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_POINT_NOT_ON_CURVE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_POINT_NOT_ON_CURVE(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_POINT_NOT_ON_CURVE));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_POINT_NOT_IN_GROUP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_POINT_NOT_IN_GROUP(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_POINT_NOT_IN_GROUP));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_AGGR_TYPE_MISMATCH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_AGGR_TYPE_MISMATCH(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_AGGR_TYPE_MISMATCH));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_VERIFY_FAIL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_VERIFY_FAIL(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_VERIFY_FAIL));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLST_PK_IS_INFINITY(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLST_PK_IS_INFINITY(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    
    jsresult = SWIG_From_int(static_cast< int >(BLST_PK_IS_INFINITY));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


static SwigV8ReturnValue _wrap_SecretKey_keygen__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_keygen" "', argument " "1"" of type '" "blst::SecretKey *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'SecretKey_keygen', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SecretKey_keygen" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecretKey_keygen" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->keygen((byte const *)arg2,arg3,(std::string const &)*arg4);
  jsresult = SWIGV8_UNDEFINED();
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey_keygen__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_keygen" "', argument " "1"" of type '" "blst::SecretKey *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'SecretKey_keygen', "
      "expecting <Buffer> or <String>");
  }
  
  (arg1)->keygen((byte const *)arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey__wrap_SecretKey_keygen(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SecretKey_keygen__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SecretKey_keygen__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_SecretKey_keygen__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_SecretKey_keygen__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function keygen.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey_from_bendian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKey_from_bendian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_from_bendian" "', argument " "1"" of type '" "blst::SecretKey *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    if (av->ByteLength() != 32)
    SWIG_exception_fail(SWIG_IndexError, "in method 'SecretKey_from_bendian', "
      "expecting 32 bytes");
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'SecretKey_from_bendian', "
      "expecting <Buffer>");
  }
  
  (arg1)->from_bendian((byte const (*))arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey_from_lendian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKey_from_lendian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_from_lendian" "', argument " "1"" of type '" "blst::SecretKey *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    if (av->ByteLength() != 32)
    SWIG_exception_fail(SWIG_IndexError, "in method 'SecretKey_from_lendian', "
      "expecting 32 bytes");
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'SecretKey_from_lendian', "
      "expecting <Buffer>");
  }
  
  (arg1)->from_lendian((byte const (*))arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey_to_bendian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[32] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKey_to_bendian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_to_bendian" "', argument " "1"" of type '" "blst::SecretKey const *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  arg2 = temp2; 
  ((blst::SecretKey const *)arg1)->to_bendian(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 32);
    memcpy(ab->GetData(), arg2, 32);
    jsresult = v8::Uint8Array::New(ab, 0, 32);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_SecretKey_to_lendian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[32] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SecretKey_to_lendian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__SecretKey, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecretKey_to_lendian" "', argument " "1"" of type '" "blst::SecretKey const *""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  arg2 = temp2; 
  ((blst::SecretKey const *)arg1)->to_lendian(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 32);
    memcpy(ab->GetData(), arg2, 32);
    jsresult = v8::Uint8Array::New(ab, 0, 32);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_SecretKey(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_SecretKey.");
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_SecretKey.");
  result = (blst::SecretKey *)new blst::SecretKey();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__SecretKey, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_SecretKey(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_SecretKey(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_SecretKey(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_SecretKey(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_SecretKey(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::SecretKey * arg1 = (blst::SecretKey *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_P1_Affine__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1_Affine__SWIG_0.");
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1_Affine__SWIG_0.");
  result = (blst::P1_Affine *)new blst::P1_Affine();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1_Affine__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  byte *arg1 = (byte *) 0 ;
  blst::P1_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1_Affine__SWIG_1.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1_Affine__SWIG_1.");
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg1 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'new_P1_Affine', "
      "expecting <Buffer>");
  }
  
  try {
    result = (blst::P1_Affine *)new blst::P1_Affine((byte const *)arg1);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1_Affine__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P1_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1_Affine__SWIG_2.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1_Affine__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P1,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P1_Affine" "', argument " "1"" of type '" "blst::P1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P1_Affine" "', argument " "1"" of type '" "blst::P1 const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (blst::P1_Affine *)new blst::P1_Affine((blst::P1 const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1_Affine(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1_Affine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1_Affine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1_Affine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1_Affine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1_Affine__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1_Affine__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_P1_Affine");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


static SwigV8ReturnValue _wrap_P1_Affine_dup(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_dup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_dup" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = ((blst::P1_Affine const *)arg1)->dup();
  jsresult = SWIG_NewPointerObj((new blst::P1_Affine(static_cast< const blst::P1_Affine& >(result))), SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_to_jacobian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_to_jacobian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_to_jacobian" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = ((blst::P1_Affine const *)arg1)->to_jacobian();
  jsresult = SWIG_NewPointerObj((new blst::P1(static_cast< const blst::P1& >(result))), SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_serialize(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[96] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_serialize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_serialize" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  arg2 = temp2; 
  ((blst::P1_Affine const *)arg1)->serialize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 96);
    memcpy(ab->GetData(), arg2, 96);
    jsresult = v8::Uint8Array::New(ab, 0, 96);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_compress(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[48] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_compress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_compress" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  arg2 = temp2; 
  ((blst::P1_Affine const *)arg1)->compress(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 48);
    memcpy(ab->GetData(), arg2, 48);
    jsresult = v8::Uint8Array::New(ab, 0, 48);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_on_curve(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_on_curve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_on_curve" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = (bool)((blst::P1_Affine const *)arg1)->on_curve();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_in_group(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_in_group.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_in_group" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = (bool)((blst::P1_Affine const *)arg1)->in_group();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_is_inf(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_is_inf.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_is_inf" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = (bool)((blst::P1_Affine const *)arg1)->is_inf();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_is_equal(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_is_equal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_is_equal" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_Affine_is_equal" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_is_equal" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  result = (bool)((blst::P1_Affine const *)arg1)->is_equal((blst::P1_Affine const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_core_verify__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  size_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_core_verify" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P1_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg7 = (byte *)buf->GetData() + av->ByteOffset();
    arg8 = av->ByteLength();
  } else if (args[4]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[4]);
    arg8 = SWIGV8_UTF8_LENGTH(str);
    arg7 = (byte *)alloca(arg8);
    SWIGV8_WRITE_UTF8(str, (char *)arg7, arg8);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7,arg8);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_core_verify__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_core_verify" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P1_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg7 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_core_verify__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_core_verify" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P1_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_core_verify__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_Affine_core_verify" "', argument " "1"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_Affine_core_verify" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P1_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine__wrap_P1_Affine_core_verify(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_Affine_core_verify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_Affine_core_verify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_Affine_core_verify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_Affine_core_verify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_Affine_core_verify__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_Affine_core_verify__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_Affine_core_verify__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_Affine_core_verify__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function core_verify.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_Affine_generator(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_Affine_generator.");
  
  result = blst::P1_Affine::generator();
  jsresult = SWIG_NewPointerObj((new blst::P1_Affine(static_cast< const blst::P1_Affine& >(result))), SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_P1_Affine(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_P1_Affine(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_P1_Affine(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_P1_Affine(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_P1_Affine(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::P1_Affine * arg1 = (blst::P1_Affine *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_P1__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1__SWIG_0.");
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1__SWIG_0.");
  result = (blst::P1 *)new blst::P1();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P1 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1__SWIG_1.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__SecretKey,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P1" "', argument " "1"" of type '" "blst::SecretKey const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P1" "', argument " "1"" of type '" "blst::SecretKey const &""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  result = (blst::P1 *)new blst::P1((blst::SecretKey const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  byte *arg1 = (byte *) 0 ;
  blst::P1 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1__SWIG_2.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1__SWIG_2.");
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg1 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'new_P1', "
      "expecting <Buffer>");
  }
  
  try {
    result = (blst::P1 *)new blst::P1((byte const *)arg1);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P1 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P1__SWIG_3.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P1__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P1" "', argument " "1"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P1" "', argument " "1"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = (blst::P1 *)new blst::P1((blst::P1_Affine const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P1(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P1__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P1__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_P1");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


static SwigV8ReturnValue _wrap_P1_dup(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_dup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_dup" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = ((blst::P1 const *)arg1)->dup();
  jsresult = SWIG_NewPointerObj((new blst::P1(static_cast< const blst::P1& >(result))), SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_to_affine(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_to_affine.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_to_affine" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = ((blst::P1 const *)arg1)->to_affine();
  jsresult = SWIG_NewPointerObj((new blst::P1_Affine(static_cast< const blst::P1_Affine& >(result))), SWIGTYPE_p_blst__P1_Affine, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_serialize(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[96] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_serialize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_serialize" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  arg2 = temp2; 
  ((blst::P1 const *)arg1)->serialize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 96);
    memcpy(ab->GetData(), arg2, 96);
    jsresult = v8::Uint8Array::New(ab, 0, 96);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_compress(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[48] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_compress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_compress" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  arg2 = temp2; 
  ((blst::P1 const *)arg1)->compress(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 48);
    memcpy(ab->GetData(), arg2, 48);
    jsresult = v8::Uint8Array::New(ab, 0, 48);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_on_curve(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_on_curve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_on_curve" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (bool)((blst::P1 const *)arg1)->on_curve();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_in_group(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_in_group.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_in_group" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (bool)((blst::P1 const *)arg1)->in_group();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_is_inf(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_is_inf.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_is_inf" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (bool)((blst::P1 const *)arg1)->is_inf();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_is_equal(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_is_equal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_is_equal" "', argument " "1"" of type '" "blst::P1 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_is_equal" "', argument " "2"" of type '" "blst::P1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_is_equal" "', argument " "2"" of type '" "blst::P1 const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1 * >(argp2);
  result = (bool)((blst::P1 const *)arg1)->is_equal((blst::P1 const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_aggregate(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_aggregate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_aggregate" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  try {
    (arg1)->aggregate((blst::P1_Affine const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_sign_with(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::SecretKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P1 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_sign_with.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_sign_with" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__SecretKey,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_sign_with" "', argument " "2"" of type '" "blst::SecretKey const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_sign_with" "', argument " "2"" of type '" "blst::SecretKey const &""'"); 
  }
  arg2 = reinterpret_cast< blst::SecretKey * >(argp2);
  result = (blst::P1 *)(arg1)->sign_with((blst::SecretKey const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_hash_to__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_hash_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
    arg6 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg6 = SWIGV8_UTF8_LENGTH(str);
    arg5 = (byte *)alloca(arg6);
    SWIGV8_WRITE_UTF8(str, (char *)arg5, arg6);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_hash_to__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_hash_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer>");
  }
  
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_hash_to__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_hash_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result; jsresult = args.Holder(); 
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_hash_to__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_hash_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1__wrap_P1_hash_to(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_hash_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_hash_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_hash_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_hash_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_hash_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_hash_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_hash_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_hash_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function hash_to.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_encode_to__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_encode_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
    arg6 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg6 = SWIGV8_UTF8_LENGTH(str);
    arg5 = (byte *)alloca(arg6);
    SWIGV8_WRITE_UTF8(str, (char *)arg5, arg6);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_encode_to__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_encode_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer>");
  }
  
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_encode_to__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_encode_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result; jsresult = args.Holder(); 
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_encode_to__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_encode_to" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1__wrap_P1_encode_to(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_encode_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_encode_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_encode_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_encode_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_encode_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_encode_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_encode_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_encode_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function encode_to.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_mult(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_mult.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_mult" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[0]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[0]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg3 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_mult', "
      "expecting unsigned value");
    arg2 = (byte *)words;
    arg3 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg2;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P1_mult', "
      "expecting <Buffer> or <BigInt>");
  }
  
  result = (blst::P1 *)(arg1)->mult((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_cneg(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  blst::P1 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_cneg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_cneg" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "P1_cneg" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (blst::P1 *)(arg1)->cneg(arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_neg(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_neg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_neg" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (blst::P1 *)(arg1)->neg();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_add__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_add" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_add" "', argument " "2"" of type '" "blst::P1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_add" "', argument " "2"" of type '" "blst::P1 const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1 * >(argp2);
  result = (blst::P1 *)(arg1)->add((blst::P1 const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_add__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P1 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_add" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P1_add" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P1_add" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  result = (blst::P1 *)(arg1)->add((blst::P1_Affine const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1__wrap_P1_add(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_add__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_add__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P1_add__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P1_add__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_dbl(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P1 *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_dbl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P1_dbl" "', argument " "1"" of type '" "blst::P1 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P1 * >(argp1);
  result = (blst::P1 *)(arg1)->dbl();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P1_generator(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P1_generator.");
  
  result = blst::P1::generator();
  jsresult = SWIG_NewPointerObj((new blst::P1(static_cast< const blst::P1& >(result))), SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_P1(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_P1(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_P1(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_P1(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_P1(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::P1 * arg1 = (blst::P1 *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_P2_Affine__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2_Affine__SWIG_0.");
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2_Affine__SWIG_0.");
  result = (blst::P2_Affine *)new blst::P2_Affine();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2_Affine__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  byte *arg1 = (byte *) 0 ;
  blst::P2_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2_Affine__SWIG_1.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2_Affine__SWIG_1.");
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg1 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'new_P2_Affine', "
      "expecting <Buffer>");
  }
  
  try {
    result = (blst::P2_Affine *)new blst::P2_Affine((byte const *)arg1);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2_Affine__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P2_Affine *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2_Affine__SWIG_2.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2_Affine__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P2_Affine" "', argument " "1"" of type '" "blst::P2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P2_Affine" "', argument " "1"" of type '" "blst::P2 const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (blst::P2_Affine *)new blst::P2_Affine((blst::P2 const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2_Affine(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2_Affine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2_Affine__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2_Affine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2_Affine__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2_Affine__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2_Affine__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_P2_Affine");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


static SwigV8ReturnValue _wrap_P2_Affine_dup(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_dup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_dup" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = ((blst::P2_Affine const *)arg1)->dup();
  jsresult = SWIG_NewPointerObj((new blst::P2_Affine(static_cast< const blst::P2_Affine& >(result))), SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_to_jacobian(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_to_jacobian.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_to_jacobian" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = ((blst::P2_Affine const *)arg1)->to_jacobian();
  jsresult = SWIG_NewPointerObj((new blst::P2(static_cast< const blst::P2& >(result))), SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_serialize(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[192] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_serialize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_serialize" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  arg2 = temp2; 
  ((blst::P2_Affine const *)arg1)->serialize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 192);
    memcpy(ab->GetData(), arg2, 192);
    jsresult = v8::Uint8Array::New(ab, 0, 192);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_compress(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[96] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_compress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_compress" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  arg2 = temp2; 
  ((blst::P2_Affine const *)arg1)->compress(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 96);
    memcpy(ab->GetData(), arg2, 96);
    jsresult = v8::Uint8Array::New(ab, 0, 96);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_on_curve(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_on_curve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_on_curve" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = (bool)((blst::P2_Affine const *)arg1)->on_curve();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_in_group(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_in_group.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_in_group" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = (bool)((blst::P2_Affine const *)arg1)->in_group();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_is_inf(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_is_inf.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_is_inf" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = (bool)((blst::P2_Affine const *)arg1)->is_inf();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_is_equal(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_is_equal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_is_equal" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_Affine_is_equal" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_is_equal" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  result = (bool)((blst::P2_Affine const *)arg1)->is_equal((blst::P2_Affine const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_core_verify__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  size_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_core_verify" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P2_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg7 = (byte *)buf->GetData() + av->ByteOffset();
    arg8 = av->ByteLength();
  } else if (args[4]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[4]);
    arg8 = SWIGV8_UTF8_LENGTH(str);
    arg7 = (byte *)alloca(arg8);
    SWIGV8_WRITE_UTF8(str, (char *)arg7, arg8);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7,arg8);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_core_verify__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_core_verify" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P2_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg7 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_core_verify__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_core_verify" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P2_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(args[3], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  if (SWIG_IsNewObj(res6)) delete arg6;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_core_verify__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_Affine_core_verify" "', argument " "1"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_Affine_core_verify" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "P2_Affine_core_verify" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_Affine_core_verify', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine__wrap_P2_Affine_core_verify(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_Affine_core_verify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_Affine_core_verify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_Affine_core_verify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_Affine_core_verify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_Affine_core_verify__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_Affine_core_verify__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_Affine_core_verify__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_Affine_core_verify__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function core_verify.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_Affine_generator(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_Affine_generator.");
  
  result = blst::P2_Affine::generator();
  jsresult = SWIG_NewPointerObj((new blst::P2_Affine(static_cast< const blst::P2_Affine& >(result))), SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_P2_Affine(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_P2_Affine(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_P2_Affine(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_P2_Affine(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_P2_Affine(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::P2_Affine * arg1 = (blst::P2_Affine *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_P2__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2__SWIG_0.");
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2__SWIG_0.");
  result = (blst::P2 *)new blst::P2();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::SecretKey *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P2 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2__SWIG_1.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__SecretKey,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P2" "', argument " "1"" of type '" "blst::SecretKey const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P2" "', argument " "1"" of type '" "blst::SecretKey const &""'"); 
  }
  arg1 = reinterpret_cast< blst::SecretKey * >(argp1);
  result = (blst::P2 *)new blst::P2((blst::SecretKey const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  byte *arg1 = (byte *) 0 ;
  blst::P2 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2__SWIG_2.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2__SWIG_2.");
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg1 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'new_P2', "
      "expecting <Buffer>");
  }
  
  try {
    result = (blst::P2 *)new blst::P2((byte const *)arg1);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::P2 *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_P2__SWIG_3.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_P2__SWIG_3.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_P2" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_P2" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = (blst::P2 *)new blst::P2((blst::P2_Affine const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_P2(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_P2__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_P2__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_P2");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


static SwigV8ReturnValue _wrap_P2_dup(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_dup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_dup" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = ((blst::P2 const *)arg1)->dup();
  jsresult = SWIG_NewPointerObj((new blst::P2(static_cast< const blst::P2& >(result))), SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_to_affine(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2_Affine result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_to_affine.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_to_affine" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = ((blst::P2 const *)arg1)->to_affine();
  jsresult = SWIG_NewPointerObj((new blst::P2_Affine(static_cast< const blst::P2_Affine& >(result))), SWIGTYPE_p_blst__P2_Affine, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_serialize(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[192] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_serialize.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_serialize" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  arg2 = temp2; 
  ((blst::P2 const *)arg1)->serialize(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 192);
    memcpy(ab->GetData(), arg2, 192);
    jsresult = v8::Uint8Array::New(ab, 0, 192);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_compress(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  byte temp2[96] ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_compress.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_compress" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  arg2 = temp2; 
  ((blst::P2 const *)arg1)->compress(arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    auto ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 96);
    memcpy(ab->GetData(), arg2, 96);
    jsresult = v8::Uint8Array::New(ab, 0, 96);
    
    
    
    
    
    
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_on_curve(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_on_curve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_on_curve" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (bool)((blst::P2 const *)arg1)->on_curve();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_in_group(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_in_group.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_in_group" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (bool)((blst::P2 const *)arg1)->in_group();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_is_inf(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_is_inf.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_is_inf" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (bool)((blst::P2 const *)arg1)->is_inf();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_is_equal(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_is_equal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_is_equal" "', argument " "1"" of type '" "blst::P2 const *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_is_equal" "', argument " "2"" of type '" "blst::P2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_is_equal" "', argument " "2"" of type '" "blst::P2 const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2 * >(argp2);
  result = (bool)((blst::P2 const *)arg1)->is_equal((blst::P2 const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_aggregate(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_aggregate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_aggregate" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  try {
    (arg1)->aggregate((blst::P2_Affine const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_V8_Raise(BLST_ERROR_str[_e]); SWIG_fail; 
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_sign_with(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::SecretKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_sign_with.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_sign_with" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__SecretKey,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_sign_with" "', argument " "2"" of type '" "blst::SecretKey const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_sign_with" "', argument " "2"" of type '" "blst::SecretKey const &""'"); 
  }
  arg2 = reinterpret_cast< blst::SecretKey * >(argp2);
  result = (blst::P2 *)(arg1)->sign_with((blst::SecretKey const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_hash_to__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_hash_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
    arg6 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg6 = SWIGV8_UTF8_LENGTH(str);
    arg5 = (byte *)alloca(arg6);
    SWIGV8_WRITE_UTF8(str, (char *)arg5, arg6);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_hash_to__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_hash_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer>");
  }
  
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_hash_to__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_hash_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_hash_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result; jsresult = args.Holder(); 
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_hash_to__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_hash_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_hash_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2__wrap_P2_hash_to(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_hash_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_hash_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_hash_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_hash_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_hash_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_hash_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_hash_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_hash_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function hash_to.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_encode_to__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_encode_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
    arg6 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg6 = SWIGV8_UTF8_LENGTH(str);
    arg5 = (byte *)alloca(arg6);
    SWIGV8_WRITE_UTF8(str, (char *)arg5, arg6);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_encode_to__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_encode_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg5 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer>");
  }
  
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5);
  (void)result; jsresult = args.Holder(); 
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_encode_to__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_encode_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_encode_to" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result; jsresult = args.Holder(); 
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_encode_to__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_encode_to" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[0]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[0]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_encode_to', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2__wrap_P2_encode_to(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_encode_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_encode_to__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_encode_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_encode_to__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_encode_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_encode_to__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_encode_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_encode_to__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function encode_to.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_mult(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_mult.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_mult" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  
  if (args[0]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[0]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[0]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[0]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg3 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_mult', "
      "expecting unsigned value");
    arg2 = (byte *)words;
    arg3 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg2;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'P2_mult', "
      "expecting <Buffer> or <BigInt>");
  }
  
  result = (blst::P2 *)(arg1)->mult((byte const *)arg2,arg3);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_cneg(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  blst::P2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_cneg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_cneg" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "P2_cneg" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (blst::P2 *)(arg1)->cneg(arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_neg(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_neg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_neg" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (blst::P2 *)(arg1)->neg();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_add__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_add" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_add" "', argument " "2"" of type '" "blst::P2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_add" "', argument " "2"" of type '" "blst::P2 const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2 * >(argp2);
  result = (blst::P2 *)(arg1)->add((blst::P2 const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_add__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::P2 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_add" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "P2_add" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "P2_add" "', argument " "2"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  result = (blst::P2 *)(arg1)->add((blst::P2_Affine const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2__wrap_P2_add(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_add__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_add__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_P2_add__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_P2_add__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function add.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_dbl(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::P2 *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_dbl.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__P2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "P2_dbl" "', argument " "1"" of type '" "blst::P2 *""'"); 
  }
  arg1 = reinterpret_cast< blst::P2 * >(argp1);
  result = (blst::P2 *)(arg1)->dbl();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_P2_generator(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_P2_generator.");
  
  result = blst::P2::generator();
  jsresult = SWIG_NewPointerObj((new blst::P2(static_cast< const blst::P2& >(result))), SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_P2(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_P2(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_P2(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_P2(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_P2(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::P2 * arg1 = (blst::P2 *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_G1(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_G1.");
  
  result = blst::G1();
  jsresult = SWIG_NewPointerObj((new blst::P1(static_cast< const blst::P1& >(result))), SWIGTYPE_p_blst__P1, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_G2(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2 result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_G2.");
  
  result = blst::G2();
  jsresult = SWIG_NewPointerObj((new blst::P2(static_cast< const blst::P2& >(result))), SWIGTYPE_p_blst__P2, SWIG_POINTER_OWN |  0 );
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_PT__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P1_Affine *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::PT *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_PT__SWIG_0.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PT__SWIG_0.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PT" "', argument " "1"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PT" "', argument " "1"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P1_Affine * >(argp1);
  result = (blst::PT *)new blst::PT((blst::P1_Affine const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__PT, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_PT__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  blst::PT *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_PT__SWIG_1.");
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PT__SWIG_1.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PT" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PT" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  result = (blst::PT *)new blst::PT((blst::P2_Affine const &)*arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__PT, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_PT__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  blst::P2_Affine *arg1 = 0 ;
  blst::P1_Affine *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::PT *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_PT__SWIG_2.");
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_PT__SWIG_2.");
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_blst__P2_Affine,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PT" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PT" "', argument " "1"" of type '" "blst::P2_Affine const &""'"); 
  }
  arg1 = reinterpret_cast< blst::P2_Affine * >(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_blst__P1_Affine,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PT" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PT" "', argument " "2"" of type '" "blst::P1_Affine const &""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  result = (blst::PT *)new blst::PT((blst::P2_Affine const &)*arg1,(blst::P1_Affine const &)*arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__PT, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_PT(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_PT__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_PT__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_PT__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_PT__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_PT__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_PT__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_PT");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


static SwigV8ReturnValue _wrap_PT_dup(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< blst::PT > result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_dup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_dup" "', argument " "1"" of type '" "blst::PT const *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  result = ((blst::PT const *)arg1)->dup();
  jsresult = SWIG_NewPointerObj((new blst::PT(static_cast< const blst::PT& >(result))), SWIGTYPE_p_blst__PT, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_PT_is_one(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_is_one.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_is_one" "', argument " "1"" of type '" "blst::PT const *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  result = (bool)((blst::PT const *)arg1)->is_one();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_PT_is_equal(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_is_equal.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_is_equal" "', argument " "1"" of type '" "blst::PT const *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__PT,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PT_is_equal" "', argument " "2"" of type '" "blst::PT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PT_is_equal" "', argument " "2"" of type '" "blst::PT const &""'"); 
  }
  arg2 = reinterpret_cast< blst::PT * >(argp2);
  result = (bool)((blst::PT const *)arg1)->is_equal((blst::PT const &)*arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_PT_sqr(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::PT *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_sqr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_sqr" "', argument " "1"" of type '" "blst::PT *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  result = (blst::PT *)(arg1)->sqr();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_PT_mul(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  blst::PT *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_mul.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_mul" "', argument " "1"" of type '" "blst::PT *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_blst__PT,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PT_mul" "', argument " "2"" of type '" "blst::PT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PT_mul" "', argument " "2"" of type '" "blst::PT const &""'"); 
  }
  arg2 = reinterpret_cast< blst::PT * >(argp2);
  result = (blst::PT *)(arg1)->mul((blst::PT const &)*arg2);
  (void)result; jsresult = args.Holder(); 
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_PT_final_exp(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::PT *arg1 = (blst::PT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  blst::PT *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PT_final_exp.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PT_final_exp" "', argument " "1"" of type '" "blst::PT *""'"); 
  }
  arg1 = reinterpret_cast< blst::PT * >(argp1);
  result = (blst::PT *)(arg1)->final_exp();
  (void)result; jsresult = args.Holder(); 
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_PT(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_PT(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_PT(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_PT(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_PT(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::PT * arg1 = (blst::PT *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_Pairing__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  bool arg1 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  blst::Pairing *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_Pairing__SWIG_0.");
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pairing__SWIG_0.");
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pairing" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  
  if (args[1]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[1]);
    auto buf = av->Buffer();
    arg2 = (byte *)buf->GetData() + av->ByteOffset();
    arg3 = av->ByteLength();
  } else if (args[1]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[1]);
    arg3 = SWIGV8_UTF8_LENGTH(str);
    arg2 = (byte *)alloca(arg3);
    SWIGV8_WRITE_UTF8(str, (char *)arg2, arg3);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'new_Pairing', "
      "expecting <Buffer> or <String>");
  }
  
  result = (blst::Pairing *)new blst::Pairing(arg1,(byte const *)arg2,arg3);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__Pairing, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_Pairing__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_OBJECT self = args.Holder();
  SWIGV8_VALUE jsdata = args.Data();
  bool arg1 ;
  std::string *arg2 = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  blst::Pairing *result;
  if(self->InternalFieldCount() < 1) SWIG_exception_fail(SWIG_ERROR, "Illegal call of constructor _wrap_new_Pairing__SWIG_1.");
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pairing__SWIG_1.");
  ecode1 = SWIG_AsVal_bool(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pairing" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(args[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Pairing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pairing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (blst::Pairing *)new blst::Pairing(arg1,(std::string const &)*arg2);
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_blst__Pairing, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_new_Pairing(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  SWIGV8_VALUE self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Pairing__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Pairing__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Pairing__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Pairing__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Pairing");
  
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Pairing(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Pairing(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Pairing(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Pairing(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Pairing(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            blst::Pairing * arg1 = (blst::Pairing *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_aggregate__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = av->ByteLength();
  } else if (args[2]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[2]);
    arg5 = SWIGV8_UTF8_LENGTH(str);
    arg4 = (byte *)alloca(arg5);
    SWIGV8_WRITE_UTF8(str, (char *)arg4, arg5);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing__wrap_Pairing_aggregate(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_aggregate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_aggregate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function aggregate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  size_t arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg8 = (byte *)buf->GetData() + av->ByteOffset();
    arg9 = av->ByteLength();
  } else if (args[4]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[4]);
    arg9 = SWIGV8_UTF8_LENGTH(str);
    arg8 = (byte *)alloca(arg9);
    SWIGV8_WRITE_UTF8(str, (char *)arg8, arg9);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8,arg9);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg8 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P1_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P2_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_3(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  size_t arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg8 = (byte *)buf->GetData() + av->ByteOffset();
    arg9 = av->ByteLength();
  } else if (args[4]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[4]);
    arg9 = SWIGV8_UTF8_LENGTH(str);
    arg8 = (byte *)alloca(arg9);
    SWIGV8_WRITE_UTF8(str, (char *)arg8, arg9);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8,arg9);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_4(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  
  if (args[4]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[4]);
    auto buf = av->Buffer();
    arg8 = (byte *)buf->GetData() + av->ByteOffset();
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_mul_n_aggregate__SWIG_5(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  BLST_ERROR result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_mul_n_aggregate" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_mul_n_aggregate" "', argument " "2"" of type '" "blst::P2_Affine const *""'"); 
  }
  arg2 = reinterpret_cast< blst::P2_Affine * >(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3,SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pairing_mul_n_aggregate" "', argument " "3"" of type '" "blst::P1_Affine const *""'"); 
  }
  arg3 = reinterpret_cast< blst::P1_Affine * >(argp3);
  
  if (args[2]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[2]);
    auto buf = av->Buffer();
    arg4 = (byte *)buf->GetData() + av->ByteOffset();
    arg5 = 8*av->ByteLength();
#if V8_MAJOR_VERSION >=6 && V8_MINOR_VERSION >= 8
  } else if (args[2]->IsBigInt()) {
    auto bi = v8::Local<v8::BigInt>::Cast(args[2]);
    int sign, word_count = bi->WordCount();
    uint64_t* words = (uint64_t*)alloca(arg5 = word_count*sizeof(uint64_t));
    
    bi->ToWordsArray(&sign, &word_count, words);
    if (sign)
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting unsigned value");
    arg4 = (byte *)words;
    arg5 *= 8;
    
    const union {
      long one;
      char little;
    } is_endian = {
      1 
    };
    
    if (!is_endian.little) {
      byte* p = arg4;
      for (int i = 0; i < word_count; i++) {
        uint64_t val = words[i];
        for (size_t j = 0; j < sizeof(val); j++, val >>= 8)
        *p++ = (byte)val;
      }
    }
#endif
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <BigInt>");
  }
  
  
  if (args[3]->IsArrayBufferView()) {
    auto av = v8::Local<v8::ArrayBufferView>::Cast(args[3]);
    auto buf = av->Buffer();
    arg6 = (byte *)buf->GetData() + av->ByteOffset();
    arg7 = av->ByteLength();
  } else if (args[3]->IsString()) {
    auto str = SWIGV8_TO_STRING(args[3]);
    arg7 = SWIGV8_UTF8_LENGTH(str);
    arg6 = (byte *)alloca(arg7);
    SWIGV8_WRITE_UTF8(str, (char *)arg6, arg7);
  } else {
    SWIG_exception_fail(SWIG_TypeError, "in method 'Pairing_mul_n_aggregate', "
      "expecting <Buffer> or <String>");
  }
  
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing__wrap_Pairing_mul_n_aggregate(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_3(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 5) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_4(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 4) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_mul_n_aggregate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_mul_n_aggregate__SWIG_5(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mul_n_aggregate.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_commit(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pairing_commit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_commit" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  (arg1)->commit();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_merge(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::Pairing *arg2 = (blst::Pairing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  BLST_ERROR result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pairing_merge.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_merge" "', argument " "1"" of type '" "blst::Pairing *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_merge" "', argument " "2"" of type '" "blst::Pairing const *""'"); 
  }
  arg2 = reinterpret_cast< blst::Pairing * >(argp2);
  result = (BLST_ERROR)(arg1)->merge((blst::Pairing const *)arg2);
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_finalverify__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::PT *arg2 = (blst::PT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_finalverify" "', argument " "1"" of type '" "blst::Pairing const *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2,SWIGTYPE_p_blst__PT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pairing_finalverify" "', argument " "2"" of type '" "blst::PT const *""'"); 
  }
  arg2 = reinterpret_cast< blst::PT * >(argp2);
  result = (bool)((blst::Pairing const *)arg1)->finalverify((blst::PT const *)arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing_finalverify__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_blst__Pairing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pairing_finalverify" "', argument " "1"" of type '" "blst::Pairing const *""'"); 
  }
  arg1 = reinterpret_cast< blst::Pairing * >(argp1);
  result = (bool)((blst::Pairing const *)arg1)->finalverify();
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


static SwigV8ReturnValue _wrap_Pairing__wrap_Pairing_finalverify(const SwigV8Arguments &args) {
  v8::Isolate* isolate = args.GetIsolate();
  SWIGV8_HANDLESCOPE();
  
  SWIGV8_VALUE jsresult;
  SWIGV8_VALUE jsdata = args.Data();
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_finalverify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_finalverify__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Pairing_finalverify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Pairing_finalverify__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function finalverify.");
  
  goto fail;
fail:
  SWIGV8_RETURN(v8::Undefined(isolate));
  (void)jsdata;
}


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLS12_381_G1_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLS12_381_G1_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    blst::P1_Affine *result = 0 ;
    
    result = (blst::P1_Affine *)&BLS12_381_G1;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLS12_381_NEG_G1_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLS12_381_NEG_G1_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    blst::P1_Affine *result = 0 ;
    
    result = (blst::P1_Affine *)&BLS12_381_NEG_G1;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blst__P1_Affine, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLS12_381_G2_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLS12_381_G2_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    blst::P2_Affine *result = 0 ;
    
    result = (blst::P2_Affine *)&BLS12_381_G2;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_BLS12_381_NEG_G2_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_BLS12_381_NEG_G2_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    v8::Isolate* isolate = info.GetIsolate();
    SWIGV8_HANDLESCOPE();
    
    SWIGV8_VALUE jsresult;
    SWIGV8_VALUE jsdata = info.Data();
    blst::P2_Affine *result = 0 ;
    
    result = (blst::P2_Affine *)&BLS12_381_NEG_G2;
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_blst__P2_Affine, 0 |  0 );
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(v8::Undefined(isolate), info);
    (void)jsdata;
  }


#undef NODE_MODULE
#define NODE_MODULE NODE_MODULE_CONTEXT_AWARE


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BLST_ERROR = {"_p_BLST_ERROR", "enum BLST_ERROR *|BLST_ERROR *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__P1 = {"_p_blst__P1", "p_blst__P1|blst::P1 *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__P1_Affine = {"_p_blst__P1_Affine", "p_blst__P1_Affine|blst::P1_Affine *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__P2 = {"_p_blst__P2", "p_blst__P2|blst::P2 *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__P2_Affine = {"_p_blst__P2_Affine", "p_blst__P2_Affine|blst::P2_Affine *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__PT = {"_p_blst__PT", "p_blst__PT|blst::PT *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__Pairing = {"_p_blst__Pairing", "p_blst__Pairing|blst::Pairing *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_blst__SecretKey = {"_p_blst__SecretKey", "blst::SecretKey *|p_blst__SecretKey", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_byte = {"_p_byte", "byte *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (SWIG_CLIENT_DATA_TYPE*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BLST_ERROR,
  &_swigt__p_blst__P1,
  &_swigt__p_blst__P1_Affine,
  &_swigt__p_blst__P2,
  &_swigt__p_blst__P2_Affine,
  &_swigt__p_blst__PT,
  &_swigt__p_blst__Pairing,
  &_swigt__p_blst__SecretKey,
  &_swigt__p_byte,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_BLST_ERROR[] = {  {&_swigt__p_BLST_ERROR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__P1[] = {  {&_swigt__p_blst__P1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__P1_Affine[] = {  {&_swigt__p_blst__P1_Affine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__P2[] = {  {&_swigt__p_blst__P2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__P2_Affine[] = {  {&_swigt__p_blst__P2_Affine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__PT[] = {  {&_swigt__p_blst__PT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__Pairing[] = {  {&_swigt__p_blst__Pairing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blst__SecretKey[] = {  {&_swigt__p_blst__SecretKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_byte[] = {  {&_swigt__p_byte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BLST_ERROR,
  _swigc__p_blst__P1,
  _swigc__p_blst__P1_Affine,
  _swigc__p_blst__P2,
  _swigc__p_blst__P2_Affine,
  _swigc__p_blst__PT,
  _swigc__p_blst__Pairing,
  _swigc__p_blst__SecretKey,
  _swigc__p_byte,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




SWIGRUNTIME void
SWIG_V8_SetModule(v8::Local<v8::Context> context, swig_module_info *swig_module) {
  v8::Isolate* isolate = SWIGV8_GETISOLATE(context);
  v8::Local<v8::Object> global_obj = context->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(isolate, SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(context, privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(v8::Local<v8::Context> context) {
  v8::Isolate* isolate = SWIGV8_GETISOLATE(context);
  v8::Local<v8::Object> global_obj = context->Global();
#if (V8_MAJOR_VERSION-0) < 5
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(isolate, SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(context, privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                v8::Local<v8::Context>


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


#if __cplusplus >= 201103L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201103L)
#include <mutex>
#endif

#if !defined(NODE_MODULE_VERSION) || (NODE_MODULE_VERSION < 12)
// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
extern "C" void SWIGV8_INIT (SWIGV8_OBJECT exports_obj)
#elif (NODE_MODULE_VERSION < 64)
void SWIGV8_INIT (SWIGV8_OBJECT exports_obj, SWIGV8_VALUE /*module*/, void*)
#else
void SWIGV8_INIT (SWIGV8_OBJECT exports_obj, SWIGV8_VALUE /*module*/, v8::Local<v8::Context> context, void*)
#endif
{
#if !defined(NODE_MODULE_VERSION) || NODE_MODULE_VERSION < 64
  v8::Local<v8::Context> context = SWIGV8_CURRENT_CONTEXT();
#endif
  v8::Isolate* isolate = SWIGV8_GETISOLATE(context);
  SWIGV8_HANDLESCOPE();

#if __cplusplus >= 201103L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201103L)
  static std::mutex guard;
  const std::lock_guard<std::mutex> lock(guard);
#endif

  SWIG_InitializeModule(context);

#if (V8_MAJOR_VERSION-0) < 5
  // Multiple threads are not supported, everything is saved in globals.
  v8::Persistent<v8::FunctionTemplate>* v8_swig_types = NULL;
  v8::Local<v8::Value> v8_swig_types_as_data;
#else
  // Formally speaking SWIGV8_INIT has
  //
  // - things to do just once, initialize global variables;
  // - things to do in each |isolate|, create Persistent<Template>-s;
  // - things to do in each |context|, instantiate |export_obj|;
  //
  // However, if you examine the generated code below, you'll notice that all
  // the things-to-do are executed always on each invocation. As for globals,
  // the arrangement in the V8_MAJOR_VERSION>=5 case is such that the
  // assignments are constant and hence can be executed multiple times
  // without side effects. And as for templates, it's reckoned that cases
  // when multiple contexts get created per isolate are rare, and occasional
  // template duplicates are tolerable. Just in case for reference, each
  // Node.js Worker thread is executed in own |isolate|, which is the most
  // common case when SWIGV8_INIT would be called multiple times.

  // Per-context array that holds Persistent<Template>-s
  size_t sz = sizeof(v8::Persistent<v8::FunctionTemplate>)
            * (sizeof(swig_types)/sizeof(swig_types[0]) + 1);
  v8::Local<v8::ArrayBuffer> v8_swig_types_as_data = v8::ArrayBuffer::New(isolate, sz);
  v8::Persistent<v8::FunctionTemplate>* v8_swig_types =
#if (V8_MAJOR_VERSION-0) >= 8
    static_cast<v8::Persistent<v8::FunctionTemplate>*>(v8_swig_types_as_data->GetBackingStore()->Data());
#else
    static_cast<v8::Persistent<v8::FunctionTemplate>*>(v8_swig_types_as_data->GetContents().Data());
#endif

  // Anchor the array, so that it won't be garbage-collected
  v8::Local<v8::Private> priv = v8::Private::ForApi(isolate,
                                                    SWIGV8_SYMBOL_NEW("__swig_types__" SWIGV8_JSNAME));
  exports_obj->SetPrivate(context, priv, v8_swig_types_as_data);
#endif


  // a class template for creating proxies of undefined types
  SWIGV8_SWIGTYPE_Proxy.SetType(SWIGV8_CreateClassTemplate("SwigProxy", isolate, v8_swig_types_as_data),
                                isolate, v8_swig_types);

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_SecretKey, Type: p_blst__SecretKey, Dtor: _wrap_delete_SecretKey */
SWIGV8_FUNCTION_TEMPLATE _exports_SecretKey_class = SWIGV8_CreateClassTemplate("_exports_SecretKey", isolate, v8_swig_types_as_data);
_exports_SecretKey_clientData.index = &SWIGTYPE_p_blst__SecretKey - &swig_types[0];
_exports_SecretKey_clientData.dtor = _wrap_delete_SecretKey;
_exports_SecretKey_clientData.SetType(_exports_SecretKey_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__SecretKey->clientdata = &_exports_SecretKey_clientData;
/* Name: _exports_P1_Affine, Type: p_blst__P1_Affine, Dtor: _wrap_delete_P1_Affine */
SWIGV8_FUNCTION_TEMPLATE _exports_P1_Affine_class = SWIGV8_CreateClassTemplate("_exports_P1_Affine", isolate, v8_swig_types_as_data);
_exports_P1_Affine_clientData.index = &SWIGTYPE_p_blst__P1_Affine - &swig_types[0];
_exports_P1_Affine_clientData.dtor = _wrap_delete_P1_Affine;
_exports_P1_Affine_clientData.SetType(_exports_P1_Affine_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__P1_Affine->clientdata = &_exports_P1_Affine_clientData;
/* Name: _exports_P1, Type: p_blst__P1, Dtor: _wrap_delete_P1 */
SWIGV8_FUNCTION_TEMPLATE _exports_P1_class = SWIGV8_CreateClassTemplate("_exports_P1", isolate, v8_swig_types_as_data);
_exports_P1_clientData.index = &SWIGTYPE_p_blst__P1 - &swig_types[0];
_exports_P1_clientData.dtor = _wrap_delete_P1;
_exports_P1_clientData.SetType(_exports_P1_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__P1->clientdata = &_exports_P1_clientData;
/* Name: _exports_P2_Affine, Type: p_blst__P2_Affine, Dtor: _wrap_delete_P2_Affine */
SWIGV8_FUNCTION_TEMPLATE _exports_P2_Affine_class = SWIGV8_CreateClassTemplate("_exports_P2_Affine", isolate, v8_swig_types_as_data);
_exports_P2_Affine_clientData.index = &SWIGTYPE_p_blst__P2_Affine - &swig_types[0];
_exports_P2_Affine_clientData.dtor = _wrap_delete_P2_Affine;
_exports_P2_Affine_clientData.SetType(_exports_P2_Affine_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__P2_Affine->clientdata = &_exports_P2_Affine_clientData;
/* Name: _exports_P2, Type: p_blst__P2, Dtor: _wrap_delete_P2 */
SWIGV8_FUNCTION_TEMPLATE _exports_P2_class = SWIGV8_CreateClassTemplate("_exports_P2", isolate, v8_swig_types_as_data);
_exports_P2_clientData.index = &SWIGTYPE_p_blst__P2 - &swig_types[0];
_exports_P2_clientData.dtor = _wrap_delete_P2;
_exports_P2_clientData.SetType(_exports_P2_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__P2->clientdata = &_exports_P2_clientData;
/* Name: _exports_PT, Type: p_blst__PT, Dtor: _wrap_delete_PT */
SWIGV8_FUNCTION_TEMPLATE _exports_PT_class = SWIGV8_CreateClassTemplate("_exports_PT", isolate, v8_swig_types_as_data);
_exports_PT_clientData.index = &SWIGTYPE_p_blst__PT - &swig_types[0];
_exports_PT_clientData.dtor = _wrap_delete_PT;
_exports_PT_clientData.SetType(_exports_PT_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__PT->clientdata = &_exports_PT_clientData;
/* Name: _exports_Pairing, Type: p_blst__Pairing, Dtor: _wrap_delete_Pairing */
SWIGV8_FUNCTION_TEMPLATE _exports_Pairing_class = SWIGV8_CreateClassTemplate("_exports_Pairing", isolate, v8_swig_types_as_data);
_exports_Pairing_clientData.index = &SWIGTYPE_p_blst__Pairing - &swig_types[0];
_exports_Pairing_clientData.dtor = _wrap_delete_Pairing;
_exports_Pairing_clientData.SetType(_exports_Pairing_class, isolate, v8_swig_types);
SWIGTYPE_p_blst__Pairing->clientdata = &_exports_Pairing_clientData;


  /* register wrapper functions */
  SWIGV8_AddStaticVariable(exports_obj, "BLST_SUCCESS", _wrap_BLST_SUCCESS, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_BAD_ENCODING", _wrap_BLST_BAD_ENCODING, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_POINT_NOT_ON_CURVE", _wrap_BLST_POINT_NOT_ON_CURVE, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_POINT_NOT_IN_GROUP", _wrap_BLST_POINT_NOT_IN_GROUP, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_AGGR_TYPE_MISMATCH", _wrap_BLST_AGGR_TYPE_MISMATCH, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_VERIFY_FAIL", _wrap_BLST_VERIFY_FAIL, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLST_PK_IS_INFINITY", _wrap_BLST_PK_IS_INFINITY, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_SecretKey_class, "keygen", _wrap_SecretKey__wrap_SecretKey_keygen, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_SecretKey_class, "from_bendian", _wrap_SecretKey_from_bendian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_SecretKey_class, "from_lendian", _wrap_SecretKey_from_lendian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_SecretKey_class, "to_bendian", _wrap_SecretKey_to_bendian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_SecretKey_class, "to_lendian", _wrap_SecretKey_to_lendian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "dup", _wrap_P1_Affine_dup, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "to_jacobian", _wrap_P1_Affine_to_jacobian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "serialize", _wrap_P1_Affine_serialize, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "compress", _wrap_P1_Affine_compress, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "on_curve", _wrap_P1_Affine_on_curve, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "in_group", _wrap_P1_Affine_in_group, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "is_inf", _wrap_P1_Affine_is_inf, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "is_equal", _wrap_P1_Affine_is_equal, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_Affine_class, "core_verify", _wrap_P1_Affine__wrap_P1_Affine_core_verify, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "dup", _wrap_P1_dup, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "to_affine", _wrap_P1_to_affine, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "serialize", _wrap_P1_serialize, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "compress", _wrap_P1_compress, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "on_curve", _wrap_P1_on_curve, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "in_group", _wrap_P1_in_group, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "is_inf", _wrap_P1_is_inf, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "is_equal", _wrap_P1_is_equal, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "aggregate", _wrap_P1_aggregate, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "sign_with", _wrap_P1_sign_with, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "hash_to", _wrap_P1__wrap_P1_hash_to, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "encode_to", _wrap_P1__wrap_P1_encode_to, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "mult", _wrap_P1_mult, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "cneg", _wrap_P1_cneg, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "neg", _wrap_P1_neg, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "add", _wrap_P1__wrap_P1_add, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P1_class, "dbl", _wrap_P1_dbl, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "dup", _wrap_P2_Affine_dup, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "to_jacobian", _wrap_P2_Affine_to_jacobian, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "serialize", _wrap_P2_Affine_serialize, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "compress", _wrap_P2_Affine_compress, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "on_curve", _wrap_P2_Affine_on_curve, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "in_group", _wrap_P2_Affine_in_group, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "is_inf", _wrap_P2_Affine_is_inf, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "is_equal", _wrap_P2_Affine_is_equal, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_Affine_class, "core_verify", _wrap_P2_Affine__wrap_P2_Affine_core_verify, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "dup", _wrap_P2_dup, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "to_affine", _wrap_P2_to_affine, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "serialize", _wrap_P2_serialize, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "compress", _wrap_P2_compress, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "on_curve", _wrap_P2_on_curve, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "in_group", _wrap_P2_in_group, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "is_inf", _wrap_P2_is_inf, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "is_equal", _wrap_P2_is_equal, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "aggregate", _wrap_P2_aggregate, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "sign_with", _wrap_P2_sign_with, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "hash_to", _wrap_P2__wrap_P2_hash_to, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "encode_to", _wrap_P2__wrap_P2_encode_to, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "mult", _wrap_P2_mult, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "cneg", _wrap_P2_cneg, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "neg", _wrap_P2_neg, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "add", _wrap_P2__wrap_P2_add, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_P2_class, "dbl", _wrap_P2_dbl, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "dup", _wrap_PT_dup, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "is_one", _wrap_PT_is_one, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "is_equal", _wrap_PT_is_equal, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "sqr", _wrap_PT_sqr, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "mul", _wrap_PT_mul, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_PT_class, "final_exp", _wrap_PT_final_exp, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_Pairing_class, "aggregate", _wrap_Pairing__wrap_Pairing_aggregate, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_Pairing_class, "mul_n_aggregate", _wrap_Pairing__wrap_Pairing_mul_n_aggregate, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_Pairing_class, "commit", _wrap_Pairing_commit, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_Pairing_class, "merge", _wrap_Pairing_merge, isolate, v8_swig_types_as_data);
SWIGV8_AddMemberFunction(_exports_Pairing_class, "finalverify", _wrap_Pairing__wrap_Pairing_finalverify, isolate, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLS12_381_G1", _wrap_BLS12_381_G1_get, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLS12_381_NEG_G1", _wrap_BLS12_381_NEG_G1_get, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLS12_381_G2", _wrap_BLS12_381_G2_get, JS_veto_set_variable, context, v8_swig_types_as_data);
SWIGV8_AddStaticVariable(exports_obj, "BLS12_381_NEG_G2", _wrap_BLS12_381_NEG_G2_get, JS_veto_set_variable, context, v8_swig_types_as_data);


  /* setup inheritances */
  

  /* class instances */
  /* Class: SecretKey (_exports_SecretKey) */
SWIGV8_FUNCTION_TEMPLATE _exports_SecretKey_class_0 = SWIGV8_CreateClassTemplate("SecretKey", isolate, v8_swig_types_as_data);
_exports_SecretKey_class_0->SetCallHandler(_wrap_new_SecretKey, v8_swig_types_as_data);
_exports_SecretKey_class_0->Inherit(_exports_SecretKey_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_SecretKey_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_SecretKey_obj = _exports_SecretKey_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_SecretKey_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_SecretKey_obj = _exports_SecretKey_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_SecretKey_obj = _exports_SecretKey_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: P1_Affine (_exports_P1_Affine) */
SWIGV8_FUNCTION_TEMPLATE _exports_P1_Affine_class_0 = SWIGV8_CreateClassTemplate("P1_Affine", isolate, v8_swig_types_as_data);
_exports_P1_Affine_class_0->SetCallHandler(_wrap_new_P1_Affine, v8_swig_types_as_data);
_exports_P1_Affine_class_0->Inherit(_exports_P1_Affine_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_P1_Affine_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_P1_Affine_obj = _exports_P1_Affine_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_P1_Affine_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_P1_Affine_obj = _exports_P1_Affine_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_P1_Affine_obj = _exports_P1_Affine_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: P1 (_exports_P1) */
SWIGV8_FUNCTION_TEMPLATE _exports_P1_class_0 = SWIGV8_CreateClassTemplate("P1", isolate, v8_swig_types_as_data);
_exports_P1_class_0->SetCallHandler(_wrap_new_P1, v8_swig_types_as_data);
_exports_P1_class_0->Inherit(_exports_P1_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_P1_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_P1_obj = _exports_P1_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_P1_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_P1_obj = _exports_P1_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_P1_obj = _exports_P1_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: P2_Affine (_exports_P2_Affine) */
SWIGV8_FUNCTION_TEMPLATE _exports_P2_Affine_class_0 = SWIGV8_CreateClassTemplate("P2_Affine", isolate, v8_swig_types_as_data);
_exports_P2_Affine_class_0->SetCallHandler(_wrap_new_P2_Affine, v8_swig_types_as_data);
_exports_P2_Affine_class_0->Inherit(_exports_P2_Affine_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_P2_Affine_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_P2_Affine_obj = _exports_P2_Affine_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_P2_Affine_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_P2_Affine_obj = _exports_P2_Affine_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_P2_Affine_obj = _exports_P2_Affine_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: P2 (_exports_P2) */
SWIGV8_FUNCTION_TEMPLATE _exports_P2_class_0 = SWIGV8_CreateClassTemplate("P2", isolate, v8_swig_types_as_data);
_exports_P2_class_0->SetCallHandler(_wrap_new_P2, v8_swig_types_as_data);
_exports_P2_class_0->Inherit(_exports_P2_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_P2_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_P2_obj = _exports_P2_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_P2_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_P2_obj = _exports_P2_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_P2_obj = _exports_P2_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: PT (_exports_PT) */
SWIGV8_FUNCTION_TEMPLATE _exports_PT_class_0 = SWIGV8_CreateClassTemplate("PT", isolate, v8_swig_types_as_data);
_exports_PT_class_0->SetCallHandler(_wrap_new_PT, v8_swig_types_as_data);
_exports_PT_class_0->Inherit(_exports_PT_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_PT_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_PT_obj = _exports_PT_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_PT_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_PT_obj = _exports_PT_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_PT_obj = _exports_PT_class_0->GetFunction(context).ToLocalChecked();
#endif
/* Class: Pairing (_exports_Pairing) */
SWIGV8_FUNCTION_TEMPLATE _exports_Pairing_class_0 = SWIGV8_CreateClassTemplate("Pairing", isolate, v8_swig_types_as_data);
_exports_Pairing_class_0->SetCallHandler(_wrap_new_Pairing, v8_swig_types_as_data);
_exports_Pairing_class_0->Inherit(_exports_Pairing_class);
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
_exports_Pairing_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Pairing_obj = _exports_Pairing_class_0->GetFunction();
#elif (SWIG_V8_VERSION < 0x0704)
_exports_Pairing_class_0->SetHiddenPrototype(true);
v8::Local<v8::Object> _exports_Pairing_obj = _exports_Pairing_class_0->GetFunction();
#else
v8::Local<v8::Object> _exports_Pairing_obj = _exports_Pairing_class_0->GetFunction(context).ToLocalChecked();
#endif


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_P1_Affine_obj, "generator", _wrap_P1_Affine_generator, context, v8_swig_types_as_data);
SWIGV8_AddStaticFunction(_exports_P1_obj, "generator", _wrap_P1_generator, context, v8_swig_types_as_data);
SWIGV8_AddStaticFunction(_exports_P2_Affine_obj, "generator", _wrap_P2_Affine_generator, context, v8_swig_types_as_data);
SWIGV8_AddStaticFunction(_exports_P2_obj, "generator", _wrap_P2_generator, context, v8_swig_types_as_data);
SWIGV8_AddStaticFunction(exports_obj, "G1", _wrap_G1, context, v8_swig_types_as_data);
SWIGV8_AddStaticFunction(exports_obj, "G2", _wrap_G2, context, v8_swig_types_as_data);


  /* register classes */
  #if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("SecretKey"), _exports_SecretKey_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("SecretKey"), _exports_SecretKey_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("P1_Affine"), _exports_P1_Affine_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("P1_Affine"), _exports_P1_Affine_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("P1"), _exports_P1_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("P1"), _exports_P1_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("P2_Affine"), _exports_P2_Affine_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("P2_Affine"), _exports_P2_Affine_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("P2"), _exports_P2_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("P2"), _exports_P2_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("PT"), _exports_PT_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("PT"), _exports_PT_obj));
#endif
#if (V8_MAJOR_VERSION-0) < 5
exports_obj->Set(SWIGV8_SYMBOL_NEW("Pairing"), _exports_Pairing_obj);
#else
SWIGV8_MAYBE_CHECK(exports_obj->Set(context, SWIGV8_SYMBOL_NEW("Pairing"), _exports_Pairing_obj));
#endif


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
#if (NODE_MODULE_VERSION < 64)
NODE_MODULE(blst, blst_initialize)
#else
#ifndef NODE_GYP_MODULE_NAME
# define NODE_GYP_MODULE_NAME blst
#endif
#if defined(__GNUC__) && __GNUC__>=8
// NODE_MODULE_INIT is not self-consistent in all supported Node.js versions :-(
# pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
NODE_MODULE_INIT() { blst_initialize(exports, module, context, NULL); }
#endif
#endif
